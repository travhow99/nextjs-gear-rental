generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Mongodb replica set package: https://dev.to/salim_angelo/how-to-convert-your-localhost-standalone-mongodb-cluster-into-a-replica-set-using-run-rs-npm-package-on-mac-os-54hd
// sudo run-rs --mongod
type OrdersPaymentResult {
  id     String
  status String
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  access_token      String
  expires_at        Int
  id_token          String
  provider          String
  providerAccountId String
  scope             String
  token_type        String
  type              String
  userId            String   @db.ObjectId
  user              User     @relation(fields: [userId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("accounts")
}

model BlockOut {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  v          Int            @default(0) @map("__v") @ignore
  count      Int
  dateIn     DateTime       @db.Date
  dateOut    DateTime       @db.Date
  softDelete Boolean?
  userId     String         @db.ObjectId
  user       User           @relation(fields: [userId], references: [id])
  productId  String?        @db.ObjectId
  product    SellerProduct? @relation(fields: [productId], references: [id])
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@map("blockouts")
}

model Brand {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  category   String
  descripion String
  logoUrl    String
  title      String
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("brands")
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  v         Int      @default(0) @map("__v") @ignore
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

// Cart / Shopping Session
model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?    @db.ObjectId
  user      User?      @relation(fields: [userId], references: [id])
  v         Int        @default(0) @map("__v") @ignore
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("cart")
}

model CartItem {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String        @db.ObjectId
  cart      Cart          @relation(fields: [cartId], references: [id])
  productId String        @db.ObjectId
  product   SellerProduct @relation(fields: [productId], references: [id])
  startDate DateTime      @db.Date
  endDate   DateTime      @db.Date
  // quantity ?
  v         Int           @default(0) @map("__v") @ignore
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("cartitems")
}

model OrderNote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  v         Int      @default(0) @map("__v") @ignore
  note      String
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ordernotes")
}

model Order {
  id                String               @id @default(auto()) @map("_id") @db.ObjectId
  v                 Int                  @default(0) @map("__v") @ignore
  isPaid            Boolean
  itemsPrice        Int
  orderNotes        OrderNote[]
  paidAt            DateTime?            @db.Date
  paymentMethod     String
  paymentResult     OrdersPaymentResult?
  rentals           Rental[]
  softDelete        Boolean?
  storeId           String?              @db.ObjectId
  store             User?                @relation(name: "OrderReceived", fields: [storeId], references: [id])
  taxPrice          Float
  totalPrice        Float
  userId            String               @db.ObjectId
  user              User                 @relation(fields: [userId], references: [id])
  orderTransactions OrderTransaction[]
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  @@map("orders")
}

model OrderTransaction {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  v             Int      @default(0) @map("__v") @ignore
  note          String?
  orderId       String?  @db.ObjectId
  order         Order?   @relation(fields: [orderId], references: [id])
  transactionId String
  type          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("orderTransactions")
}

model ProductImage {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  v         Int            @default(0) @map("__v") @ignore
  category  String
  path      String
  product   SellerProduct? @relation(fields: [productId], references: [id])
  productId String?        @db.ObjectId
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("productimages")
}

// @todo @deprecated ?
// Original idea was to have "base" products that users could make their own instance of
model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  v           Int      @default(0) @map("__v") @ignore
  brand       String
  category    String
  description String
  gender      String?
  imageAlt    String
  imageUrl    String
  price       Int
  rating      Float
  rental_min  Int
  size        String?
  slug        String   @unique
  stock       Int
  title       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}

model Rental {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  v               Int            @default(0) @map("__v") @ignore
  dateDue         DateTime       @db.Date
  dateOut         DateTime       @db.Date
  price           Int
  quantity        Int
  softDelete      Boolean
  userId          String         @db.ObjectId
  user            User           @relation(fields: [userId], references: [id])
  orders          Order?         @relation(fields: [orderId], references: [id])
  orderId         String?        @db.ObjectId
  sellerProduct   SellerProduct? @relation(fields: [sellerProductId], references: [id])
  sellerProductId String?        @db.ObjectId
  usermessages    UserMessage[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("rentals")
}

// @todo Generate unique slug
model SellerProduct {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  v            Int            @default(0) @map("__v") @ignore
  blockOuts    BlockOut[]
  brand        String
  category     String
  condition    String?
  description  String
  gender       String?
  images       ProductImage[]
  keyword      String?
  price        Int
  product      String
  rentalMin    Int
  rentals      Rental[]
  size         String?
  slug         String         @unique
  softDelete   Boolean?
  stock        Int
  title        String
  userId       String         @db.ObjectId
  user         User           @relation(fields: [userId], references: [id])
  usermessages UserMessage[]
  CartItem     CartItem[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("sellerproducts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  expires      DateTime @db.Date
  sessionToken String
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model UserMessage {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  v         Int            @default(0) @map("__v") @ignore
  message   String
  productId String?        @db.ObjectId
  product   SellerProduct? @relation(fields: [productId], references: [id])
  rentalId  String?        @db.ObjectId
  rental    Rental?        @relation(fields: [rentalId], references: [id])
  sentById  String         @db.ObjectId
  sentBy    User           @relation(name: "UserMessageOutgoing", fields: [sentById], references: [id])
  sentToId  String         @db.ObjectId
  sentTo    User           @relation(name: "UserMessageIncoming", fields: [sentToId], references: [id])
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("usermessages")
}

model User {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  email               String
  emailVerified       DateTime?       @db.Date
  image               String
  name                String
  role                String?
  seller              Boolean?
  accounts            Account[]
  blockouts           BlockOut[]
  orders              Order[]
  rentals             Rental[]
  sellerproducts      SellerProduct[]
  sessions            Session[]
  UserMessageOutgoing UserMessage[]   @relation("UserMessageOutgoing")
  UserMessageIncoming UserMessage[]   @relation("UserMessageIncoming")
  OrderReceived       Order[]         @relation("OrderReceived")
  Cart                Cart[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  @@map("users")
}
