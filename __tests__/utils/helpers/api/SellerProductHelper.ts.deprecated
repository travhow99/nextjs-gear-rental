import { prismaMock } from '../../../../singleton';
import { sellerOwnsProduct } from '../../../../utils/helpers/api/SellerProductHelper';

test('should assert user owns SellerProduct ', async () => {
	const user = {
		id: 1,
		name: 'Rich',
		email: 'hello@prisma.io',
		acceptTermsAndConditions: true,
	};

	prismaMock.user.create.mockResolvedValue(user);

	await expect(sellerOwnsProduct(user)).resolves.toEqual(true);
});

test('should update a users name ', async () => {
	const user = {
		id: 1,
		name: 'Rich Haines',
		email: 'hello@prisma.io',
	};

	prismaMock.user.update.mockResolvedValue(user);

	await expect(updateUsername(user)).resolves.toEqual({
		id: 1,
		name: 'Rich Haines',
		email: 'hello@prisma.io',
	});
});

return;

test('should fail if user does not accept terms', async () => {
	const user = {
		id: 1,
		name: 'Rich Haines',
		email: 'hello@prisma.io',
		acceptTermsAndConditions: false,
	};

	prismaMock.user.create.mockRejectedValue(
		new Error('User must accept terms!')
	);

	await expect(createUser(user)).resolves.toEqual(
		new Error('User must accept terms!')
	);
});
